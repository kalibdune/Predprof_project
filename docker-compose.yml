services:
  db:
    image: mysql:8
    ports:
      - "${DB_PORT}:${DB_PORT}"
    environment:
      - MYSQL_ROOT_HOST=${DB_HOST}
      - MYSQL_DATABASE=${DB_NAME}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
    volumes:
      - dbdata:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 15s
      timeout: 10s
      retries: 3
    networks:
      - predprof_backend

  django_gunicorn:
    volumes:
      - static:/static
    env_file:
      - .env
    command: gunicorn config.wsgi:application --bind 0.0.0.0:8000
    build:
      context: .
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - predprof_backend

  redis:
    image: redis:7.4.0
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 15s
      timeout: 10s
      retries: 3
    networks:
      - predprof_backend

  celery:
    volumes:
      - static:/static
    env_file:
      - .env
    build:
      context: .
    command: celery -A config worker -P prefork --concurrency=2 -l info
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "celery -A config status" ]
      interval: 15s
      timeout: 10s
      retries: 3
    networks:
      - predprof_backend

  celery-beat:
    volumes:
      - static:/static
    env_file:
      - .env
    build:
      context: .
    command: celery -A config beat -l info
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "celery -A config status" ]
      interval: 15s
      timeout: 10s
      retries: 3
    networks:
      - predprof_backend

  nginx:
    build: ./nginx
    volumes:
      - static:/static
    ports:
      - "80:80"
    depends_on:
      django_gunicorn:
        condition: service_started
    networks:
      - predprof_backend

volumes:
  static:
  dbdata:


networks:
  predprof_backend:
